# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DmZEBuduC5V7icg75wB9_dmJbYmIox8F
"""

#!pip install streamlit

import streamlit as st
import pandas as pd
import joblib
import xgboost as xgb
import matplotlib.pyplot as plt
import datetime

# Load model
model = joblib.load("xgb_long_term_sales_model.pkl")

# App title and description
st.set_page_config(page_title="Sales Forecasting App", layout="centered")
st.title("ðŸ“ˆ Store Sales Forecasting Dashboard")
st.markdown("Predict weekly sales using store info, economic factors, and markdown features.")

# Sidebar for inputs
st.sidebar.header("ðŸ§¾ Input Features")

store = st.sidebar.number_input("Store ID", min_value=1, max_value=50, value=1)
dept = st.sidebar.number_input("Department ID", min_value=1, max_value=100, value=1)
size = st.sidebar.slider("Store Size", min_value=1000, max_value=500000, value=150000, step=5000)
store_type = st.sidebar.selectbox("Store Type", ['A', 'B', 'C'])
is_holiday = st.sidebar.radio("Holiday Week?", ['No', 'Yes'])
cpi = st.sidebar.number_input("CPI", value=211.0)
unemployment = st.sidebar.number_input("Unemployment Rate", value=7.5)
fuel_price = st.sidebar.number_input("Fuel Price", value=3.0)
markdown1 = st.sidebar.number_input("MarkDown1", value=0.0)
markdown2 = st.sidebar.number_input("MarkDown2", value=0.0)
markdown3 = st.sidebar.number_input("MarkDown3", value=0.0)
markdown4 = st.sidebar.number_input("MarkDown4", value=0.0)
markdown5 = st.sidebar.number_input("MarkDown5", value=0.0)
selected_date = st.sidebar.date_input("Select Forecast Date", value=datetime.date(2012, 11, 30))

# Feature engineering from date
year = selected_date.year
month = selected_date.month
week = selected_date.isocalendar()[1]

# Encode categorical features
store_type_map = {'A': 0, 'B': 1, 'C': 2}
store_type_encoded = store_type_map[store_type]
is_holiday_binary = 1 if is_holiday == 'Yes' else 0

# Input DataFrame
input_data = pd.DataFrame([{
    'Store': store,
    'Dept': dept,
    'Size': size,
    'Type': store_type_encoded,
    'IsHoliday': is_holiday_binary,
    'CPI': cpi,
    'Unemployment': unemployment,
    'Fuel_Price': fuel_price,
    'MarkDown1': markdown1,
    'MarkDown2': markdown2,
    'MarkDown3': markdown3,
    'MarkDown4': markdown4,
    'MarkDown5': markdown5,
    'Year': year,
    'Month': month,
    'Week': week
}])

# Prediction button and result
st.markdown("---")
if st.button("ðŸ”® Predict Weekly Sales"):
    prediction = model.predict(input_data)[0]
    st.success(f"ðŸ“Š **Predicted Weekly Sales: ${prediction:,.2f}**")
    
    # Optional: visualize prediction
    st.markdown("#### ðŸ“‰ Forecast Visualization")
    st.bar_chart(pd.DataFrame({'Predicted Sales': [prediction]}, index=['Forecast Week']))

